import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "你好 ${name}"
  String greetTo(String name) => "你好 ${name}";
  /// "登陆"
  String get login => "登陆";
  /// "登出"
  String get loginout => "登出";
  /// "中文"
  String get language => "中文";
  /// "语言"
  String get lang => "语言";
  /// "首页"
  String get home => "首页";
  /// "兑换"
  String get exchange => "兑换";
  /// "市场"
  String get market => "市场";
  /// "我的"
  String get mine => "我的";
  /// "我的背包"
  String get mypackage => "我的背包";
  /// "充值"
  String get recharge => "充值";
  /// "提现"
  String get withdraw => "提现";
  /// "邀请好友"
  String get invite => "邀请好友";
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Hello ${name}"
  @override
  String greetTo(String name) => "Hello ${name}";
  /// "Sign in"
  @override
  String get login => "Sign in";
  /// "Sign out"
  @override
  String get loginout => "Sign out";
  /// "English"
  @override
  String get language => "English";
  /// "Language"
  @override
  String get lang => "Language";
  /// "Home"
  @override
  String get home => "Home";
  /// "Exchange"
  @override
  String get exchange => "Exchange";
  /// "Market"
  @override
  String get market => "Market";
  /// "Mine"
  @override
  String get mine => "Mine";
  /// "My backpackage"
  @override
  String get mypackage => "My backpackage";
  /// "Recharge"
  @override
  String get recharge => "Recharge";
  /// "Withdraw"
  @override
  String get withdraw => "Withdraw";
  /// "Invite friends"
  @override
  String get invite => "Invite friends";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "CN"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("zh_CN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}