import 'dart:convert';
import 'dart:typed_data';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:migo/common/const/cosnt.dart';
import 'package:migo/common/network/network.dart';
import 'package:migo/common/single/download.dart';
import 'package:migo/common/textstyle/textstyle.dart';
import 'package:migo/common/util/time_tool.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/screenutil.dart';
import 'package:flutter_statusbarcolor/flutter_statusbarcolor.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../model/banner_model.dart';

class GuidePage extends StatefulWidget {

  @override
  _GuidePageState createState() => _GuidePageState();
}

class _GuidePageState extends State<GuidePage> {

  List<BannerModel> banners = [];
  // 本地图片
  Map<String, dynamic> localMap = {};
  List<Uint8List> listData = [];
  bool pushed = false;
  @override
  void initState() {
    super.initState();
    _getBanner();
    _request();
  }

  void _getBanner() async {
    SharedPreferences share = await SharedPreferences.getInstance();
    String val = share.getString(AppConst.APP_BANNERS_KEY);
    if(val == null) return;
    Map<String, dynamic> res = json.decode(val);
    setState(() {
      localMap = res;
    });
  }

  void _request() {
    Networktool.request(API.banner + "4",method: HTTPMETHOD.GET, success: (data) async {
      BannerAutogenerated auto = BannerAutogenerated.fromJson(data);
      if (auto.data != null) {
        banners = auto.data;
        if (mounted) {
          setState(() {});
        }
        if(banners.length == 0) return;
        final imgUrls = banners.map((e) => e.bannerUrl).toList();
        // 缓存banner
        SharedDownloadInstance.instance.cacheImage(imgUrls);
      }
    },);
  }


  void _jumpToRoot(BuildContext context) async {
    setState(() {
      pushed = true;
    });
    final share = await SharedPreferences.getInstance();
    if(share.getString(AppConst.KEY_user_token) != null) {
      Navigator.of(context).pushReplacementNamed('/root');
    } else {
      Navigator.of(context).pushReplacementNamed('/login');
    }
  }

  Widget _createImage(BannerModel e, Size size) {
    String name = e.bannerUrl.split("/").last;
    if(localMap.isNotEmpty && localMap[name] != null) {
      Uint8List data = base64.decode(localMap[name]);
      return Image.memory(
        data,
        width: size.width, 
        fit: BoxFit.fill,
        height: size.height,
      );
    }
    return CachedNetworkImage(
      imageUrl: e.bannerUrl, 
      width: size.width, 
      fit: BoxFit.fill,
      placeholder: (context, url) {
        return SizedBox(
          height: size.height, 
          width: size.width, 
          child: Image.asset("assets/guidebanner.png", fit: BoxFit.fill,)
        );
      },
      errorWidget: (context, url, error) => Icon(Icons.error),
      height: size.height
    );
  }

  @override
  Widget build(BuildContext context) {
    FlutterStatusbarcolor.setStatusBarColor(Colors.transparent, animate: true);
    ScreenUtil.init(context, width: 375, height: 667, allowFontScaling: true);
    final size = MediaQuery.of(context).size;
    return Scaffold(
      backgroundColor: AppColor.divigrey,
      body: Stack(
        children: [
          Positioned.fill(
            child: ListView.builder(
              padding: const EdgeInsets.all(0),
              scrollDirection: Axis.horizontal,
              physics: PageScrollPhysics(),
              itemCount: banners.length,
              itemBuilder: (context, index){
                return _createImage(banners[index], size);
              }, 
            ),
          ),
          Positioned(
            top: 0,
            right: 0,
            left: 0,
            child: SafeArea(
              child: Padding(
                padding: const EdgeInsets.all(15),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    InkWell(
                      onTap: () => _jumpToRoot(context),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          border: Border.all(color: Colors.white, width: 1.5)
                        ),
                        child: Text("跳过", style: AppFont.textStyle(14, color: Colors.white,),),
                      ),
                    ),
                    CounterWidget(finished: () => _jumpToRoot(context), pushed: pushed,)
                  ],
                ),
              ),
            ),
          )
        ],
      ),
    );
  }
}

class CounterWidget extends StatefulWidget {
  final Function finished;
  final bool pushed;
  const CounterWidget({Key key, this.pushed, this.finished}) : super(key: key);
  @override
  _CounterWidgetState createState() => _CounterWidgetState();
}

class _CounterWidgetState extends State<CounterWidget> {

  TimeTool _timeTool;
  int duration = 5;
  @override
  void initState() {
    super.initState();
    _beginTimer();
  }

  @override
  void dispose() {
    _timeTool.stop();
    super.dispose();
  }

  void _beginTimer() {
    _timeTool = TimeTool.begin(duration: 5, callback: (count) {
        if(count <= 0 && !widget.pushed) {
          widget.finished();
          return;
        }
        if(mounted)setState(() {
          if(count < 0) {
            _timeTool.stop();
          } else {
            duration = count;
          }
        });
        
      });
  }

  
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 40,
      height: 40,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(width: 1.5, color: Colors.white)
      ),
      child: Text("$duration", style: AppFont.textStyle(14, color: Colors.white),),
    );
  }
}